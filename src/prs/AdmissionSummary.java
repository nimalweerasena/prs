/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package prs;

import com.mysql.jdbc.Connection;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import mymod.dbconnector;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.type.OrientationEnum;
import net.sf.jasperreports.engine.type.WhenNoDataTypeEnum;
import net.sf.jasperreports.view.JRViewer;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author wan
 */
public class AdmissionSummary extends javax.swing.JInternalFrame {

    Connection con = (Connection) dbconnector.c;
    Map m2 = new HashMap();

    /**
     * Creates new form AdmissionSummary
     */
    public AdmissionSummary() {
        initComponents();
    }

    void updateAgeGroupCodes() {
        String sql = "SELECT * FROM admissions a WHERE a.`grp_code`='0'";
        int dbcountFromSql = 0;
        try {
            dbcountFromSql = wans_javalib.DBFunctions.dbcountFromSql(con, sql);

        } catch (SQLException ex) {
            Logger.getLogger(AdmissionSummary.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (dbcountFromSql != 0) {
            MessageBox.ok("Some age group codes not updated ... Please wait until the records are updated");
            Cursor c = new Cursor(Cursor.WAIT_CURSOR);
//            JPopupMenu pop = new JPopupMenu("Please wait !!!");
//            pop.show(jComboBox1, 75, 20);
            Frm_IMMR im = new Frm_IMMR();
            im.updateAgeGroup();
            Cursor c2 = new Cursor(Cursor.DEFAULT_CURSOR);
        } else {
            Cursor c1 = new Cursor(Cursor.DEFAULT_CURSOR);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        perodFrom = new de.wannawork.jcalendar.JCalendarComboBox();
        perodTo = new de.wannawork.jcalendar.JCalendarComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        option_AdmSumm = new javax.swing.JRadioButton();
        option_DiagnoseSumm = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        check_withChart = new javax.swing.JCheckBox();
        combo_orderby = new javax.swing.JComboBox();

        setClosable(true);
        setTitle("Periodical Summaries");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        perodFrom.setBackground(new java.awt.Color(51, 255, 51));
        perodFrom.setDate(new java.util.Date(1365461812000L));
        perodFrom.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        perodFrom.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                perodFromStateChanged(evt);
            }
        });

        perodTo.setBackground(new java.awt.Color(51, 255, 51));
        perodTo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        perodTo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                perodToStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("From");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("To");
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("<<< Period >>>");
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(perodFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(perodTo, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)))
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(perodFrom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(perodTo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel2, jLabel3, perodFrom, perodTo});

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setBackground(new java.awt.Color(255, 255, 204));
        jTable1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTable1.setForeground(new java.awt.Color(0, 102, 51));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setFillsViewportHeight(true);
        jScrollPane1.setViewportView(jTable1);

        jComboBox1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ward No", "Ward", "Admission Type", "Admission Category", "Age Group", "Admission Date", "Admission Week", "Admission Month", "Admission Hour", "Gender", "Marital Status", "Police Area" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Group By");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Order By");
        jLabel5.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        buttonGroup1.add(option_AdmSumm);
        option_AdmSumm.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        option_AdmSumm.setForeground(new java.awt.Color(51, 0, 153));
        option_AdmSumm.setSelected(true);
        option_AdmSumm.setText("Admission Summary");
        option_AdmSumm.setActionCommand("A");
        option_AdmSumm.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                option_AdmSummStateChanged(evt);
            }
        });

        buttonGroup1.add(option_DiagnoseSumm);
        option_DiagnoseSumm.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        option_DiagnoseSumm.setForeground(new java.awt.Color(51, 0, 153));
        option_DiagnoseSumm.setText("Diagnosis Summary");
        option_DiagnoseSumm.setActionCommand("D");
        option_DiagnoseSumm.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                option_DiagnoseSummStateChanged(evt);
            }
        });

        jPanel2.setLayout(new java.awt.GridLayout(2, 1));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 0, 0));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/process.jpg"))); // NOI18N
        jButton1.setText("Create");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/report.png"))); // NOI18N
        jButton2.setText("View Report");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jButton2FocusLost(evt);
            }
        });
        jPanel2.add(jButton2);

        check_withChart.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        check_withChart.setSelected(true);
        check_withChart.setText("With Chart");

        combo_orderby.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        combo_orderby.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Group Field Ascending", "Group Field Descending", "Value Field Ascending", "Value Field Descending" }));
        combo_orderby.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_orderbyItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(option_AdmSumm, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(option_DiagnoseSumm, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_orderby, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(check_withChart, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(option_AdmSumm, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(option_DiagnoseSumm, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(check_withChart, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(combo_orderby, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void viewReport() {
        String actionCommand = buttonGroup1.getSelection().getActionCommand();
        if ("A".equals(actionCommand)) {
            Report rpt = new Report();
            String sql = "SELECT\n"
                    + "     max(admissions.`bhtno`) AS NoOfAdmissions,\n"
                    + "     admissions.`w_num` AS GroupField\n"
                    + "FROM\n"
                    + "     `admissions` admissions INNER JOIN `admision_items` admision_items ON admissions.`adm_type` = admision_items.`it_code`";
            newrpt rpt1 = new newrpt(sql);
            JRDesignQuery jr = new JRDesignQuery();
            jr.setText(sql);
            rpt1.setQuery(jr);

            rpt.generateReport("Admissions.jrxml", m2, con);
            m2.clear();

        } else {
            Report rpt = new Report();
            rpt.generateReport("Diagnosis.jrxml", m2, con);
            m2.clear();

        }
    }

    class newrpt extends JasperDesign {

        String q;
        String property = System.getProperty("user.dir");
        String reportDir = property + "\\Reports\\";

        public void setOrientationValue(OrientationEnum orientationValue) {
           
            this.orientationValue = orientationValue;
        }

        public newrpt(String querySql) {
            q = querySql;
           JRDesignQuery query = new JRDesignQuery();
           query.setText(q);
        }

//        @Override
//        public void setQuery(JRDesignQuery query) {
//            query.setText(q);
//          //  super.setQuery(query); //To change body of generated methods, choose Tools | Templates.
//        }

        public void generateReport(String reportname, Map params, Connection con) {
            try {

                JasperReport jr = JasperCompileManager.compileReport(reportDir + reportname);
                JasperPrint jp = JasperFillManager.fillReport(jr, params, con);

                jr.setWhenNoDataType(WhenNoDataTypeEnum.NO_PAGES);
                List pages = jp.getPages();
                if (!pages.isEmpty()) {
                    JasperViewer jp1 = new JasperViewer(jp);
                    jp1.viewReport(jp, false);
                } else {
                    JOptionPane.showMessageDialog(null, "No data for the report");
                }


                JRViewer view = new JRViewer(jp);

                view.setOpaque(true);
                view.setVisible(true);

            } catch (JRException ex) {
                // Logger.getLogger(Report.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex);
            }



        }
    }
    /*



     Ward No
     Ward
     Admission Type
     Admission Category
     Age Group
     Admission Date 
     
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        Date datefrom = perodFrom.getDate();
        Date dateto = perodTo.getDate();
        String recordSource = "";
        String actionCommand = buttonGroup1.getSelection().getActionCommand();
        if ("A".equals(actionCommand)) {




            String countField = "count(admissions.`bhtno`) AS NoOfAdmissions";

            Map m = new HashMap();
            m.put(1, "admision_items.`item`");
            m.put(2, "admissions.`adm_date`");
            m.put(3, "admission_types.`type`");

            m.put(4, "wards.`w_descriptn`");
            m.put(5, "age_groups.`age_group`");
            m.put(6, "admissions.`w_num` ");
            m.put(7, "WEEKOFYEAR(admissions.`adm_date`) ");
            m.put(8, "CONCAT(YEAR(admissions.`adm_date`),'-', RIGHT(CONCAT('0',MONTH(admissions.`adm_date`)),2))");
            m.put(9, "HOUR(admissions.`adm_time`) ");
            m.put(10, "register.`sex`");
            m.put(11, "admissions.`status`");
            m.put(12, "admissions.`police`");
            //Ward No, Ward, Admission Type, Admission Category, Age Group
            String grpFields = "";
            String grpFieldsName = "";

            int size = jComboBox1.getModel().getSize();
            String selectedItem = (String) jComboBox1.getSelectedItem();
            if ("Ward No".equals(selectedItem)) {
                grpFields = (String) m.get(6);

            } else if ("Admission Type".equals(selectedItem)) {
                grpFields = (String) m.get(1);

            } else if ("Admission Category".equals(selectedItem)) {
                grpFields = (String) m.get(3);
            } else if ("Age Group".equals(selectedItem)) {
                grpFields = (String) m.get(5);
            } else if ("Admission Date".equals(selectedItem)) {
                grpFields = (String) m.get(2);
            } else if ("Ward".equals(selectedItem)) {
                grpFields = (String) m.get(4);
            } else if ("Admission Week".equals(selectedItem)) {
                grpFields = (String) m.get(7);
            } else if ("Admission Month".equals(selectedItem)) {
                grpFields = (String) m.get(8);
            } else if ("Admission Hour".equals(selectedItem)) {
                grpFields = (String) m.get(9);
            } else if ("Gender".equals(selectedItem)) {
                grpFields = (String) m.get(10);
            } else if ("Marital Status".equals(selectedItem)) {
                grpFields = (String) m.get(11);
            } else if ("Police Area".equals(selectedItem)) {
                grpFields = (String) m.get(12);
            }

            m2.put("GroupField", grpFields);
            m2.put("grpFieldsName", selectedItem);
            m2.put("periodFrom", datefrom);
            m2.put("periodTo", dateto);




            String sqlFrom = " FROM     `admissions` admissions INNER JOIN `admision_items` admision_items ON admissions.`adm_type` = admision_items.`it_code`     INNER JOIN `admission_types` admission_types ON admision_items.`adm_code` = admission_types.`adm_code`    INNER JOIN `wards` wards ON admissions.`w_num` = wards.`w_num`    INNER JOIN `age_groups` age_groups ON admissions.`grp_code` = age_groups.`grp_code`  INNER JOIN `register` register ON admissions.`pidno` = register.`pid`"
                    + " where admissions.`adm_date` between '" + new SimpleDateFormat("yyyy-MM-dd").format(datefrom) + "' and '" + new SimpleDateFormat("yyyy-MM-dd").format(dateto) + "'";
            recordSource = "SELECT " + grpFields + " AS " + selectedItem.replace(' ', '_') + " ," + countField + sqlFrom + " GROUP BY " + grpFields;


            //   System.out.println(""+recordSource);


        } else {
            //     String countField = "count(admissions.`bhtno`) AS NoOfAdmissions";

            Map m = new HashMap();
            m.put(1, "icd10_block.`d_Title`");
            m.put(2, "icd10_subblock.`d_SubTitle`");
            m.put(3, "icd10_deasease.`d_disease`");

            m.put(4, "register.`sex`");
            m.put(5, "admissions.`status`");
            m.put(6, "admissions.`police`");
//            m.put(5, "age_groups.`age_group`");
//            m.put(6, "admissions.`w_num` ");
            //Ward No, Ward, Admission Type, Admission Category, Age Group
            String grpFields = "";
            //String grpFieldsName = "";
            int size = jComboBox1.getModel().getSize();
            String selectedItem = (String) jComboBox1.getSelectedItem();
            if ("ICD10 Disease Title".equals(selectedItem)) {
                grpFields = (String) m.get(1);

            } else if ("ICD10 Disease SubTitle".equals(selectedItem)) {
                grpFields = (String) m.get(2);

            } else if ("ICD10 Disease".equals(selectedItem)) {
                grpFields = (String) m.get(3);
            } else if ("Gender".equals(selectedItem)) {
                grpFields = (String) m.get(4);
            } else if ("Marital Status".equals(selectedItem)) {
                grpFields = (String) m.get(5);
            } else if ("Police Area".equals(selectedItem)) {
                grpFields = (String) m.get(6);
            }
            boolean withchart = check_withChart.isSelected();
            m2.put("GroupField", grpFields);
            m2.put("grpFieldsName", selectedItem);
            m2.put("periodFrom", datefrom);
            m2.put("periodTo", dateto);
            m2.put("withchart", withchart);

//

            recordSource = "SELECT "
                    + "    " + grpFields + " AS GroupField, "
                    + "     count(icd10_deasease.`d_disease`) AS CountOfdisease "
                    + "FROM "
                    + "     `icd10_deasease` icd10_deasease INNER JOIN `diagnose` diagnose ON icd10_deasease.`d_Group` = diagnose.`d_group` "
                    + "     INNER JOIN `icd10_subblock` icd10_subblock ON icd10_deasease.`d_Subblock` = icd10_subblock.`d_Subblock` "
                    + "     INNER JOIN `icd10_block` icd10_block ON icd10_subblock.`d_block` = icd10_block.`d_block` "
                    + "     INNER JOIN `admissions` admissions ON diagnose.`bhtno` = admissions.`bhtno` "
                    + "     INNER JOIN `register` register ON admissions.`pidno` = register.`pid` "
                    + "WHERE "
                    + "     diagnose.`dis_date` BETWEEN '" + new SimpleDateFormat("yyyy-MM-dd").format(datefrom) + "' and '" + new SimpleDateFormat("yyyy-MM-dd").format(dateto) + "' "
                    + "GROUP BY " + grpFields;

//            String sqlFrom = " FROM     `admissions` admissions INNER JOIN `admision_items` admision_items ON admissions.`adm_type` = admision_items.`it_code`     INNER JOIN `admission_types` admission_types ON admision_items.`adm_code` = admission_types.`adm_code`    INNER JOIN `wards` wards ON admissions.`w_num` = wards.`w_num`    INNER JOIN `age_groups` age_groups ON admissions.`grp_code` = age_groups.`grp_code`"
//                    + " where admissions.`adm_date` between '" + new SimpleDateFormat("yyyy-MM-dd").format(datefrom) + "' and '" + new SimpleDateFormat("yyyy-MM-dd").format(dateto) + "'";
//             recordSource = "SELECT " + grpFields + " AS " + selectedItem.replace(' ', '_') + " ," + countField + sqlFrom + " GROUP BY " + grpFields;



        }
        try {
            //  wans_javalib.Tables.setTableModel1(con, jTable1, recordSource);
            ResultSet rs = wans_javalib.RecordManipulator.getResultSet(con, recordSource);
            wans_javalib.Tables.setTableModel(rs, jTable1, recordSource, new int[]{700, 100});



        } catch (SQLException ex) {
            Logger.getLogger(AdmissionSummary.class.getName()).log(Level.SEVERE, null, ex);
        }


        jButton2.setEnabled(true);

    }//GEN-LAST:event_jButton1ActionPerformed

    class c extends DefaultTableCellRenderer implements TableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
//            setHorizontalAlignment(JTextField.RIGHT);
//            setText((String) value);
//            Enumeration<TableColumn> columns = table.getColumnModel().getColumns();
//            TableColumn nextElement = columns.nextElement();
//            nextElement.setCellRenderer(table.getDefaultRenderer(Integer.class));
            //    JTextField editor = new JTextField();
            if (value != null) {
                setText(value.toString());
            }
            setBackground((row % 2 == 0) ? Color.white : Color.cyan);
            setHorizontalAlignment(JTextField.RIGHT);
            if (isSelected) {
                if (row == 3) {
                    setBackground(Color.red);
                }
            }
            return this;
        }
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        viewReport();
        /*bcom*/

        /*
         jTable1.setModel(new javax.swing.table.DefaultTableModel(
         new Object[][]{
         {null, null, null, null},
         {null, null, null, null},
         {null, null, null, null},
         {null, null, null, null}
         },
         new String[]{
         "Title 1", "Title 2", "Title 3", "Title 4"
         }));
         */
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
//updateAgeGroupCodes();
    }//GEN-LAST:event_formInternalFrameOpened

    private void jButton2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButton2FocusLost
        jButton2.setEnabled(false);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2FocusLost

    private void perodFromStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_perodFromStateChanged
        jButton2.setEnabled(false);
    }//GEN-LAST:event_perodFromStateChanged

    private void perodToStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_perodToStateChanged
        jButton2.setEnabled(false);
    }//GEN-LAST:event_perodToStateChanged

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        jButton2.setEnabled(false);
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void option_AdmSummStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_option_AdmSummStateChanged
        jButton2.setEnabled(false);
        setItems();

    }//GEN-LAST:event_option_AdmSummStateChanged
    void setItems() {
        String actionCommand = buttonGroup1.getSelection().getActionCommand();
        if ("A".equals(actionCommand)) {
            /*Ward No
             Admission Type
             * Admission Category
             * Age Group
             * Admission Date
             * Ward
             */
            jComboBox1.removeAllItems();
            jComboBox1.addItem("Ward No");
            jComboBox1.addItem("Ward");
            jComboBox1.addItem("Admission Type");
            jComboBox1.addItem("Admission Category");
            jComboBox1.addItem("Age Group");
            jComboBox1.addItem("Admission Date");
            jComboBox1.addItem("Admission Week");
            jComboBox1.addItem("Admission Month");
            jComboBox1.addItem("Admission Hour");
            jComboBox1.addItem("Gender");
            jComboBox1.addItem("Marital Status");
            jComboBox1.addItem("Police Area");
        } else {
            /*
      
             icd10_block.`d_Title` ICD10 Disease Title
             icd10_subblock.`d_SubTitle`ICD10 Disease SubTitle
             icd10_deasease.`d_disease` ICD10 Disease
             register.`sex` Gender

             */
            jComboBox1.removeAllItems();
            jComboBox1.addItem("ICD10 Disease Title");
            jComboBox1.addItem("ICD10 Disease SubTitle");
            jComboBox1.addItem("ICD10 Disease");
            jComboBox1.addItem("Gender");
            jComboBox1.addItem("Marital Status");
            jComboBox1.addItem("Police Area");
        }
    }
    private void option_DiagnoseSummStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_option_DiagnoseSummStateChanged
        jButton2.setEnabled(false);
        setItems();

    }//GEN-LAST:event_option_DiagnoseSummStateChanged

    private void combo_orderbyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_orderbyItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_orderbyItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox check_withChart;
    private javax.swing.JComboBox combo_orderby;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JRadioButton option_AdmSumm;
    private javax.swing.JRadioButton option_DiagnoseSumm;
    private de.wannawork.jcalendar.JCalendarComboBox perodFrom;
    private de.wannawork.jcalendar.JCalendarComboBox perodTo;
    // End of variables declaration//GEN-END:variables
}
