/*

 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package prs;

import com.mysql.jdbc.Connection;
import java.awt.Cursor;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import mymod.dbconnector;
import net.sf.jasperreports.engine.JRException;
import wans_javalib.CrossTabQueryBuilder;

/**
 *
 * @author Your Name <your.name at your.org>
 */
public class Frm_IMMR extends javax.swing.JInternalFrame {

    Connection con = (Connection) dbconnector.c;
    int counter;
    /**
     *
     */
    public static Thread progressThread;

    /**
     * Creates new form Frm_IMMR
     */
    public Frm_IMMR() {
        initComponents();
        int counter1 = 0;
        combo_year.removeAllItems();
        for (int i = 0; i < 50; i++) {
            combo_year.addItem(i + 2000);
            counter1++;
        }

    }

//    void fillYears() {
//        int counter = 0;
//        combo_year.removeAllItems();
//        for (int i = 0; i < 50; i++) {
//            combo_year.addItem(i + 2000);
//            counter++;
//        }
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        combo_year = new javax.swing.JComboBox();
        combo_qtr = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txt_beds = new javax.swing.JTextField();
        btn_add = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btn_makeIMMR = new javax.swing.JButton();
        cmd_immr = new javax.swing.JButton();
        progress = new javax.swing.JProgressBar();

        setBackground(new java.awt.Color(204, 255, 204));
        setClosable(true);
        setTitle("IMMR Report");
        setPreferredSize(new java.awt.Dimension(500, 454));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jSeparator1.setBackground(new java.awt.Color(102, 0, 51));

        jPanel3.setBackground(new java.awt.Color(153, 0, 51));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(153, 153, 0)));

        combo_year.setEditable(true);
        combo_year.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        combo_year.setForeground(new java.awt.Color(255, 51, 51));
        combo_year.setAutoscrolls(true);

        combo_qtr.setEditable(true);
        combo_qtr.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        combo_qtr.setForeground(new java.awt.Color(255, 0, 0));
        combo_qtr.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));
        combo_qtr.setAutoscrolls(true);
        combo_qtr.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_qtrItemStateChanged(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 204, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, java.awt.Color.gray));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Number of Patient Beds for the Quarter");

        txt_beds.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_beds.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_beds.setText("0");

        btn_add.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btn_add.setForeground(new java.awt.Color(153, 0, 153));
        btn_add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/save.jpg"))); // NOI18N
        btn_add.setText("Add");
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_beds)
                    .addComponent(btn_add, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(txt_beds)))
                .addGap(0, 0, 0)
                .addComponent(btn_add, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Year");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Quarter");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, 0)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(combo_qtr, 0, 0, Short.MAX_VALUE)
                            .addComponent(combo_year, 0, 0, Short.MAX_VALUE)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(combo_year, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(3, 3, 3)))
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(combo_qtr, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        btn_makeIMMR.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btn_makeIMMR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/process.jpg"))); // NOI18N
        btn_makeIMMR.setMnemonic('p');
        btn_makeIMMR.setText("Process IMMR");
        btn_makeIMMR.setEnabled(false);
        btn_makeIMMR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_makeIMMRActionPerformed(evt);
            }
        });

        cmd_immr.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cmd_immr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Edit.gif"))); // NOI18N
        cmd_immr.setMnemonic('i');
        cmd_immr.setText("View IMMR Report");
        cmd_immr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_immrActionPerformed(evt);
            }
        });

        progress.setBackground(new java.awt.Color(0, 153, 0));
        progress.setOrientation(1);
        progress.setToolTipText("Report creation progress");
        progress.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        progress.setOpaque(true);
        progress.setStringPainted(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmd_immr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_makeIMMR, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(btn_makeIMMR, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(cmd_immr, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE))
                    .addComponent(progress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    int getAgeGroupCode(int ageInDates) {
        int agegroup = 0;
        try {
            String crtable = "";
            crtable = "select grp_code,age_group,(min_age_Y*360)+(min_age_M*30)+(min_age_D*1) as mindates, (max_age_Y*360)+(max_age_M*30)+(max_age_D*1) as maxdates  from age_groups";
            ResultSet rs = wans_javalib.RecordManipulator.getResultSet(con, crtable);


            while (rs.next()) {
                if (ageInDates >= rs.getInt(3) && ageInDates <= rs.getInt(4)) {
                    agegroup = rs.getInt(1);

                    break;
                }

            }

            rs.close();

        } catch (SQLException ex) {
            //    Logger.getLogger(NewJInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return agegroup;
    }

    int convertAgeToDates(int Y, int M, int D) {

        return (Y * 360) + (M * 30) + (D * 1);
    }

    void updateAgeGroup() {


        try {
//            progressThread.setDaemon(true);

            String sql = "select age_Y,age_M,age_D, grp_code,bhtno from admissions";
            Statement createStatement = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
            ResultSet resultSet = createStatement.executeQuery(sql);
            ResultSet rs = wans_javalib.RecordManipulator.getResultSet(con, sql);
            int recordCount = wans_javalib.wans_MetaData.recordCount(rs);
            progress.setMaximum(recordCount);
            progress.setMinimum(0);
            progress.setValue(0);
            while (resultSet.next()) {
                int convertAgeToDates = convertAgeToDates(resultSet.getInt(1), resultSet.getInt(2), resultSet.getInt(3));
                int ageGroupCode = getAgeGroupCode(convertAgeToDates);
                resultSet.moveToCurrentRow();

                resultSet.updateInt(4, ageGroupCode);
                resultSet.updateRow();
                Runnable rn = new Runnable() {
                    @Override
                    public void run() {
                        progress.setValue(counter);


                    }
                };
                progressThread = new Thread(rn);
                progressThread.start();


                counter++;
                progressThread.interrupt();
            }
            rs.close();
            resultSet.close();
        } catch (SQLException ex) {
            Logger.getLogger(Frm_IMMR.class.getName()).log(Level.SEVERE, null, ex);
        }


    }

    void createIMMRSummary(int immr_year, int immr_quarter) {
        try {
            String sql = "";
            Date endDateofQuarter = wans_javalib.wans_Formats.getEndDateofQuarter(immr_year, immr_quarter);
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            String endDate = df.format(endDateofQuarter);
            Date startDateofQuarter = wans_javalib.wans_Formats.getStartDateofQuarter(immr_year, immr_quarter);
            DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
            String startDate = df1.format(startDateofQuarter);

            sql = "DROP TABLE IF EXISTS `immr`.`immr_non_discharged`";
            con.createStatement().execute(sql);
            //   sql = "CREATE TABLE immr_out  SELECT TIMESTAMP(diagnose.`dis_date`,diagnose.`dis_time`) AS Dis_DateTime, Year(diagnose.`dis_date`) AS Dis_Year, Quarter(diagnose.`dis_date`) AS Dis_Quarter,     diagnose.`bhtno` AS bhtno,     diagnose.`dis_code` AS Dis_Code,     diagnose.`dis_date` AS Dis_Date,     diagnose.`dis_time` AS Dis_Time FROM     `diagnose` diagnose WHERE     Year(diagnose.`dis_date`) = " + immr_year + "     and Quarter(diagnose.`dis_date`) = " + immr_quarter;
            sql = "CREATE TABLE immr_non_discharged  SELECT     TIMESTAMP(admissions.`adm_date`,admissions.`adm_time`) AS Adm_DateTime,     year(admissions.`adm_date`) AS Adm_Year,     Quarter(admissions.`adm_date`) AS Adm_Quarter,     TIMESTAMP(diagnose.`dis_date`,diagnose.`dis_time`) AS Dis_DateTime,     admissions.`adm_date` AS Adm_Date,     admissions.`adm_time` AS Adm_Time,     admissions.`bhtno` AS Adm_Bhtno,     IFNULL(diagnose.`bhtno`,'PatientIn') AS Dis_Bhtno,     diagnose.`dis_date` AS Dis_Date,     diagnose.`dis_time` AS Dis_Time,Year( diagnose.`dis_date`) as Dis_Year,Quarter( diagnose.`dis_date`) as Dis_Quarter,Timestampdiff(DAY,TIMESTAMP( admissions.`adm_date`,admissions.`adm_time`),TIMESTAMP( '" + endDate + "','00:00:00')) as PatientDays FROM     `diagnose` diagnose RIGHT OUTER JOIN `admissions` admissions ON diagnose.`bhtno` = admissions.`bhtno` WHERE     admissions.`adm_date` <= '" + endDate + "' and IFNULL(diagnose.`dis_date`,'0000-00-00')='0000-00-00' "
                    + " union all "
                    + "SELECT     TIMESTAMP(admissions.`adm_date`,admissions.`adm_time`) AS Adm_DateTime,     year(admissions.`adm_date`) AS Adm_Year,     Quarter(admissions.`adm_date`) AS Adm_Quarter,     ifnull(TIMESTAMP(diagnose.`dis_date`,diagnose.`dis_time`),'n') AS Dis_DateTime,     admissions.`adm_date` AS Adm_Date,     admissions.`adm_time` AS Adm_Time,     admissions.`bhtno` AS Adm_Bhtno,     IFNULL(diagnose.`bhtno`,'PatientIn') AS Dis_Bhtno,     ifnull(diagnose.`dis_date`,'0000-00-00') AS Dis_Date,     ifnull(diagnose.`dis_time`,'0000-00-00') AS Dis_Time,ifnull(Year( diagnose.`dis_date`),'n') as Dis_Year,ifnull(Quarter( diagnose.`dis_date`),'n') as Dis_Quarter,Timestampdiff(DAY,TIMESTAMP( admissions.`adm_date`,admissions.`adm_time`),TIMESTAMP( '" + endDate + "','00:00:00')) as PatientDays FROM     `diagnose` diagnose RIGHT OUTER JOIN `admissions` admissions ON diagnose.`bhtno` = admissions.`bhtno` WHERE     admissions.`adm_date` <='" + endDate + "' and diagnose.`dis_date`>'" + endDate + "'";
            con.createStatement().execute(sql);
            sql = "ALTER TABLE `immr`.`immr_non_discharged` ADD PRIMARY KEY (`Adm_Bhtno`);";
            con.createStatement().execute(sql);
            sql = "UPDATE immr_non_discharged SET PatientDays=1 where PatientDays=0";
            con.createStatement().execute(sql);
            sql = "DROP TABLE IF EXISTS `immr`.`immr_discharged`";
            con.createStatement().execute(sql);
//Timestampdiff(DAY,TIMESTAMP( if(admissions.`adm_date`<'" + startDate + "','" + startDate + "',admissions.`adm_date`),'00:00:00'),TIMESTAMP( diagnose.`dis_date`,diagnose.`dis_time`)) as PatientDaysInQtr
            //Timestampdiff(HOUR,TIMESTAMP( admissions.`adm_date`,admissions.`adm_time`),TIMESTAMP( diagnose.`dis_date`,diagnose.`dis_time`)) as PatientHours,Timestampdiff(DAY,TIMESTAMP( admissions.`adm_date`,admissions.`adm_time`),TIMESTAMP( diagnose.`dis_date`,diagnose.`dis_time`)) as PatientDays          
            sql = "CREATE TABLE immr_discharged  SELECT     TIMESTAMP(admissions.`adm_date`,admissions.`adm_time`) AS Adm_DateTime,     year(admissions.`adm_date`) AS Adm_Year,     Quarter(admissions.`adm_date`) AS Adm_Quarter,     TIMESTAMP(diagnose.`dis_date`,diagnose.`dis_time`) AS Dis_DateTime,     admissions.`adm_date` AS Adm_Date,     admissions.`adm_time` AS Adm_Time,     admissions.`bhtno` AS Adm_Bhtno,     IFNULL(diagnose.`bhtno`,'PatientIn') AS Dis_Bhtno,     diagnose.`dis_date` AS Dis_Date,     diagnose.`dis_time` AS Dis_Time,Year( diagnose.`dis_date`) as Dis_Year,Quarter( diagnose.`dis_date`) as Dis_Quarter,Timestampdiff(HOUR,TIMESTAMP( admissions.`adm_date`,admissions.`adm_time`),TIMESTAMP( diagnose.`dis_date`,diagnose.`dis_time`)) as PatientHours,Timestampdiff(DAY,TIMESTAMP( admissions.`adm_date`,admissions.`adm_time`),TIMESTAMP( diagnose.`dis_date`,diagnose.`dis_time`)) as PatientDays,  Timestampdiff(DAY,TIMESTAMP( if(admissions.`adm_date`<'" + startDate + "','" + startDate + "',admissions.`adm_date`),'00:00:00'),TIMESTAMP( diagnose.`dis_date`,diagnose.`dis_time`)) as PatientDaysInQtr, diagnose.`dis_code` as Dis_Type FROM     `diagnose` diagnose RIGHT OUTER JOIN `admissions` admissions ON diagnose.`bhtno` = admissions.`bhtno` WHERE     admissions.`adm_date` <= '" + endDate + "' and IFNULL(diagnose.`dis_date`,'0000-00-00')<>'0000-00-00' and diagnose.`dis_date`>='" + startDate + "' and diagnose.`dis_date`<='" + endDate + "' order by admissions.`adm_date`,admissions.`bhtno`";
//ALTER TABLE `immr`.`immr_discharged` ADD PRIMARY KEY (`Adm_Bhtno`);


            con.createStatement().execute(sql);
            sql = "ALTER TABLE `immr`.`immr_discharged` ADD PRIMARY KEY (`Adm_Bhtno`);";
            con.createStatement().execute(sql);
            sql = "UPDATE immr_discharged SET PatientDays=1,PatientDaysInQtr=1  where PatientDays=0 and Adm_Date>=" + startDate;
            con.createStatement().execute(sql);
            sql = "DROP TABLE IF EXISTS `immr`.`immr_admission`";
            con.createStatement().execute(sql);
          //  sql = "SELECT     count(admissions.`bhtno`) AS admission_Count,     IFNULL(MAX(admissions.`bhtno`),'No Admissions') AS admission_Last,     IFNULL(MIN(admissions.`bhtno`),'No Admissions') AS admission_First,     YEAR(admissions.`adm_date`) AS AdmYear,     QUARTER(admissions.`adm_date`) AS AdmQuarter,     admission_types.`adm_code` AS admission_types_type FROM     `admissions` admissions RIGHT OUTER JOIN `admission_types` admission_types ON admissions.`adm_type` = admission_types.`adm_code` where YEAR(admissions.`adm_date`)=" + immr_year + " and QUARTER(admissions.`adm_date`)=" + immr_quarter + " GROUP BY     admission_types_type,     YEAR(admissions.`adm_date`),     QUARTER(admissions.`adm_date`)ORDER BY     admission_types.`adm_code` ASC";
            sql = "SELECT\n"
                    + "     count(admissions.`bhtno`) AS admission_Count,\n"
                    + "     IFNULL(MAX(admissions.`bhtno`),'No Admissions') AS admission_Last,\n"
                    + "     IFNULL(MIN(admissions.`bhtno`),'No Admissions') AS admission_First,\n"
                    + "     YEAR(admissions.`adm_date`) AS AdmYear,\n"
                    + "     QUARTER(admissions.`adm_date`) AS AdmQuarter,\n"
                    + "     admission_types.`adm_code` AS admission_types_adm_code,\n"
                    + "     admission_types.`type` AS admission_types_type,\n"
                    + "     admision_items.`adm_code` AS admision_items_adm_code\n"
                    + "FROM\n"
                    + "     `admission_types` admission_types LEFT OUTER JOIN `admision_items` admision_items ON admission_types.`adm_code` = admision_items.`adm_code`\n"
                    + "     LEFT OUTER JOIN `admissions` admissions ON admision_items.`it_code` = admissions.`adm_type`\n"
                    + "WHERE\n"
                    + "     YEAR(admissions.`adm_date`) ='" + immr_year + "'\n"
                    + "     and QUARTER(admissions.`adm_date`) = '" + immr_quarter + "'\n"
                    + "GROUP BY\n"
                    + "     admision_items_adm_code,\n"
                    + "     YEAR(admissions.`adm_date`),\n"
                    + "    \n"
                    + "     QUARTER(admissions.`adm_date`)\n"
                    + "     \n"
                    + "ORDER BY\n"
                    + "     admission_types.`adm_code` ASC";
            sql = "CREATE TABLE immr_admission " + sql;
            con.createStatement().execute(sql);




        } catch (SQLException ex) {
            Logger.getLogger(Frm_IMMR.class.getName()).log(Level.SEVERE, null, ex);
        }


    }

//    void createimmrsummary(int immr_year, int immr_quarter) {
//        String sql = "";
//        Date endDateofQuarter = wans_javalib.wans_Formats.getEndDateofQuarter(immr_year, immr_quarter);
//        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
//        String endDate = df.format(endDateofQuarter);
//        Date startDateofQuarter = wans_javalib.wans_Formats.getStartDateofQuarter(immr_year, immr_quarter);
//        DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
//        String startDate = df1.format(startDateofQuarter);
//
//        try {
//            sql = "DROP TABLE IF EXISTS `immr`.`immr_summary`";
//            con.createStatement().execute(sql);
//
//            //"SELECT     year(diagnose.`dis_date`) AS ImmrYear,     quarter(diagnose.`dis_date`) AS ImmrQuarter,     datediff(diagnose.`dis_date`,admissions.`adm_date`) AS ResidingDays,     diagnose.`dis_date` AS DischargeDate,     diagnose.`bhtno` AS BhtNumber,     admissions.`adm_date` AS AdmissionDate,     diagnose.`dis_code` AS DischargeCode,     diagnose.`dis_time` AS DischargeTime,     admissions.`adm_time` AS AdmissionTime,TIMESTAMP( admissions.`adm_date`,admissions.`adm_time`) as AdmittedOn,TIMESTAMP( diagnose.`dis_date`,diagnose.`dis_time`) as DischargedOn,Timestampdiff(HOUR,TIMESTAMP( admissions.`adm_date`,admissions.`adm_time`),TIMESTAMP( diagnose.`dis_date`,diagnose.`dis_time`)) as PatientHours,Timestampdiff(DAY,TIMESTAMP( admissions.`adm_date`,admissions.`adm_time`),TIMESTAMP( diagnose.`dis_date`,diagnose.`dis_time`)) as PatientDays FROM     `admissions` admissions INNER JOIN `diagnose` diagnose ON admissions.`bhtno` = diagnose.`bhtno`WHERE     admissions.`adm_date` < '"+endDateofQuarter+"'";                
//            sql = "CREATE TABLE immr_summary SELECT     year(diagnose.`dis_date`) AS DischargeYear,     quarter(diagnose.`dis_date`) AS DischargeQuarter,     datediff(diagnose.`dis_date`,admissions.`adm_date`) AS ResidingDays,     diagnose.`dis_date` AS DischargeDate,     diagnose.`bhtno` AS BhtNumber,     admissions.`adm_date` AS AdmissionDate,     diagnose.`dis_code` AS DischargeCode,     diagnose.`dis_time` AS DischargeTime,     admissions.`adm_time` AS AdmissionTime,TIMESTAMP( admissions.`adm_date`,admissions.`adm_time`) as AdmittedOn,TIMESTAMP( diagnose.`dis_date`,diagnose.`dis_time`) as DischargedOn,Timestampdiff(HOUR,TIMESTAMP( admissions.`adm_date`,admissions.`adm_time`),TIMESTAMP( diagnose.`dis_date`,diagnose.`dis_time`)) as PatientHours,Timestampdiff(DAY,TIMESTAMP( admissions.`adm_date`,admissions.`adm_time`),TIMESTAMP( diagnose.`dis_date`,diagnose.`dis_time`)) as PatientDays,Timestampdiff(DAY,TIMESTAMP( if(admissions.`adm_date`<'" + startDate + "','" + startDate + "',admissions.`adm_date`),'00:00:00'),TIMESTAMP( diagnose.`dis_date`,diagnose.`dis_time`)) as PatientDaysInQtr , if(admissions.`adm_date`<'" + startDate + "','Y','N') as GoingOn FROM     `admissions` admissions  LEFT OUTER JOIN `diagnose` diagnose ON admissions.`bhtno` = diagnose.`bhtno`WHERE     admissions.`adm_date` <= '" + endDate + "' and diagnose.`dis_date`<= '" + endDate + "' and diagnose.`dis_date`>= '" + startDate + "'";
//            // sql = "CREATE TABLE immr_summary SELECT     year(diagnose.`dis_date`) AS DischargeYear,     quarter(diagnose.`dis_date`) AS DischargeQuarter,     datediff(diagnose.`dis_date`,admissions.`adm_date`) AS ResidingDays,     diagnose.`dis_date` AS DischargeDate,     diagnose.`bhtno` AS BhtNumber,     admissions.`adm_date` AS AdmissionDate,     diagnose.`dis_code` AS DischargeCode,     diagnose.`dis_time` AS DischargeTime,     admissions.`adm_time` AS AdmissionTime,TIMESTAMP( admissions.`adm_date`,admissions.`adm_time`) as AdmittedOn,TIMESTAMP( diagnose.`dis_date`,diagnose.`dis_time`) as DischargedOn,Timestampdiff(HOUR,TIMESTAMP( admissions.`adm_date`,admissions.`adm_time`),TIMESTAMP( diagnose.`dis_date`,diagnose.`dis_time`)) as PatientHours,Timestampdiff(DAY,TIMESTAMP( admissions.`adm_date`,admissions.`adm_time`),TIMESTAMP( diagnose.`dis_date`,diagnose.`dis_time`)) as PatientDays,Timestampdiff(DAY,TIMESTAMP( if(admissions.`adm_date`<'" + startDate + "','" + startDate + "',admissions.`adm_date`),admissions.`adm_time`),TIMESTAMP( diagnose.`dis_date`,diagnose.`dis_time`)) as PatientDaysInQtr , if(admissions.`adm_date`<'" + startDate + "','Y','N') as GoingOn FROM     `admissions` admissions  LEFT OUTER JOIN `diagnose` diagnose ON admissions.`bhtno` = diagnose.`bhtno`WHERE     admissions.`adm_date` <= '" + endDate + "'";
//            con.createStatement().execute(sql);
//            //"ALTER TABLE `immr`.`immr_summary` ADD PRIMARY KEY (`BhtNumber`), ROW_FORMAT = DYNAMIC";   
//            sql = "ALTER TABLE `immr`.`immr_summary` ADD PRIMARY KEY (`BhtNumber`), ROW_FORMAT = DYNAMIC";
//
//            con.createStatement().execute(sql);
//
//            sql = "UPDATE immr_summary SET PatientDays=1,PatientDaysInQtr=1  where PatientHours <= 24 and GoingOn='N'";
//            con.createStatement().execute(sql);
//            sql = "UPDATE immr_summary SET PatientDaysInQtr=1  where PatientDaysInQtr = 0 and GoingOn='Y' and PatientHours <= 24 ";
//            con.createStatement().execute(sql);
//            sql = "DROP TABLE IF EXISTS `immr`.`immr_summary1`";
//            con.createStatement().execute(sql);
//            // sql = "CREATE TABLE immr_summary1 SELECT year(admissions.`adm_date`) AS AdmissionYear,     quarter(admissions.`adm_date`) AS AdmissionQuarter,     admissions.`bhtno` AS admissions_bhtno,     admissions.`adm_type` AS admissions_adm_type,     diagnose.`bhtno` AS diagnose_bhtno,     admissions.`adm_date` AS admissions_adm_date,     admissions.`adm_time` AS admissions_adm_time,     diagnose.`dis_code` AS diagnose_dis_code FROM     `diagnose` diagnose RIGHT OUTER JOIN `admissions` admissions ON diagnose.`bhtno` = admissions.`bhtno` where year(admissions.`adm_date`)='" + immr_year + "' and quarter(admissions.`adm_date`)= '" + immr_quarter + "'";
//            sql = "CREATE TABLE immr_summary1 SELECT year(admissions.`adm_date`) AS AdmissionYear,     quarter(admissions.`adm_date`) AS AdmissionQuarter,     admissions.`bhtno` AS admissions_bhtno,     admissions.`adm_type` AS admissions_adm_type,     IFNULL(diagnose.`bhtno`,'GoingOn') AS diagnose_bhtno,     admissions.`adm_date` AS admissions_adm_date,     admissions.`adm_time` AS admissions_adm_time,     diagnose.`dis_code` AS diagnose_dis_code FROM     `diagnose` diagnose RIGHT OUTER JOIN `admissions` admissions ON diagnose.`bhtno` = admissions.`bhtno` where admissions.`adm_date`<='" + endDate + "'";
//            con.createStatement().execute(sql);
//            sql = "DROP TABLE IF EXISTS `immr`.`immr_admission`";
//            con.createStatement().execute(sql);
//            sql = "SELECT     count(admissions.`bhtno`) AS admission_Count,     IFNULL(MAX(admissions.`bhtno`),'No Admissions') AS admission_Last,     IFNULL(MIN(admissions.`bhtno`),'No Admissions') AS admission_First,     YEAR(admissions.`adm_date`) AS AdmYear,     QUARTER(admissions.`adm_date`) AS AdmQuarter,     admission_types.`adm_code` AS admission_types_type FROM     `admissions` admissions RIGHT OUTER JOIN `admission_types` admission_types ON admissions.`adm_type` = admission_types.`adm_code` where YEAR(admissions.`adm_date`)=" + immr_year + " and QUARTER(admissions.`adm_date`)=" + immr_quarter + " GROUP BY     admission_types_type,     YEAR(admissions.`adm_date`),     QUARTER(admissions.`adm_date`)ORDER BY     admission_types.`adm_code` ASC";
//
//            sql = "CREATE TABLE immr_admission " + sql;
//            con.createStatement().execute(sql);
//
//
//        } catch (SQLException ex) {
//            Logger.getLogger(Frm_IMMR.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//    }
    void createimmrdata(int immr_year, int immr_quarter) {
        try {
            Cursor cr = new Cursor(Cursor.WAIT_CURSOR);
            setCursor(cr);
            updateAgeGroup();

            String sql = "";
            sql = "DROP TABLE IF EXISTS `immr`.`diagnose1`";
            con.createStatement().execute(sql);
            sql = "CREATE TABLE diagnose1 SELECT     diagnose.`bhtno` AS bhtno,     diagnose.`d_group` AS d_group,   if(diagnose.`dis_code`=3,1,diagnose.`dis_code`) AS dis_code,     diagnose.`dis_date` AS dis_date,     diagnose.`dis_time` AS dis_time,     diagnose.`med_legel` AS med_legel FROM     `diagnose` diagnose";
            con.createStatement().execute(sql);
            sql = "DROP TABLE IF EXISTS `immr`.`immr_groups`";
            con.createStatement().execute(sql);

            sql = "CREATE TABLE immr_groups SELECT     sex.`sexid` AS sex_sexid,     discharge_types.`dis_code` AS dis_code,     age_groups.`grp_code` AS grp_code,concat(discharge_types.`dis_code`,'_', sex.`sexid`,'_', age_groups.`grp_code`)as combination FROM     `discharge_types` discharge_types,     `age_groups` age_groups,     `sex` sex where discharge_types.`dis_code`!=3";

            con.createStatement().execute(sql);
            sql = "ALTER TABLE `immr`.`immr_groups` MODIFY COLUMN `combination` VARCHAR(25) DEFAULT NULL, ROW_FORMAT = DYNAMIC;";
            con.createStatement().execute(sql);
            sql = "DROP TABLE IF EXISTS `immr`.`immr_data`";
            con.createStatement().execute(sql);

            sql = "CREATE TABLE immr_data  SELECT     year(diagnose.`dis_date`) AS disyear,     quarter(diagnose.`dis_date`) AS disquarter,     count(diagnose.`bhtno`) AS countPatients,     register.`sex` AS sex,     admissions.`grp_code` AS age_group,     diagnose.`d_group` AS deasease_code,     if(diagnose.`dis_code`=3,1,diagnose.`dis_code`)  AS discharge_code,concat(if(diagnose.`dis_code`=3,1,diagnose.`dis_code`) ,'_',register.`sex`,'_',admissions.`grp_code`) as combination FROM     `admissions` admissions INNER JOIN `register` register ON admissions.`pidno` = register.`pid`     INNER JOIN `diagnose` diagnose ON admissions.`bhtno` = diagnose.`bhtno` where year(diagnose.`dis_date`) = " + immr_year + " and quarter(diagnose.`dis_date`) = " + immr_quarter + " GROUP BY     year(diagnose.`dis_date`),     diagnose.`dis_date`,     quarter(diagnose.`dis_date`),     diagnose.`dis_date`,     age_group,     discharge_code,     deasease_code,     sex";
            //where year(diagnose.`dis_date`) = "+immr_year+" and quarter(diagnose.`dis_date`) = "+immr_quarter+" 
            con.createStatement().execute(sql);
            sql = "ALTER TABLE `immr`.`immr_data` MODIFY COLUMN `combination` VARCHAR(25) DEFAULT NULL, ROW_FORMAT = DYNAMIC;";
            con.createStatement().execute(sql);
            sql = "select * from immr_data";
            ResultSet resultSet = wans_javalib.RecordManipulator.getResultSet(con, sql);
            if (wans_javalib.wans_MetaData.recordCount(resultSet) > 0) {


                sql = "DROP TABLE IF EXISTS `immr`.`immr_cross_data`";
                con.createStatement().execute(sql);

                sql = "CREATE TABLE immr_cross_data  SELECT      IFNULL(sum(immr_data.`countPatients`),0) AS immr_count,     immr_groups.`combination` AS category,     immr_data.`disyear` AS disyear,     immr_data.`disquarter` AS disquarter,     icd10_deasease.`d_immrNo` AS immr_code FROM     `immr_data` immr_data RIGHT OUTER JOIN `immr_groups` immr_groups ON immr_data.`combination` = immr_groups.`combination`     LEFT OUTER JOIN `icd10_deasease` icd10_deasease ON immr_data.`deasease_code` = icd10_deasease.`d_Group` GROUP BY     category,   disyear,     disquarter,    immr_code";
                //where  immr_data.`disyear` = "+immr_year+" and immr_data.`disquarter` = "+immr_quarter+" 
                con.createStatement().execute(sql);

                wans_javalib.CrossTabQueryBuilder q = new CrossTabQueryBuilder();
                String crosstabSQL = q.crosstabSQL_all(con, "immr_cross_data", "category", "immr_count", "sum");
                sql = "DROP TABLE IF EXISTS `immr`.`immr_final`";
                con.createStatement().execute(sql);
                // System.out.println(""+crosstabSQL);
                sql = "Select Disyear,Disquarter, immr_code," + crosstabSQL + " from immr_cross_data group by Disyear,disquarter,immr_code";
                String c = "CREATE TABLE `immr`.`immr_final` " + sql;
                con.createStatement().execute(c);

                //SELECT      icd10_deasease.`d_immrNo` AS icd10_deasease_d_immrNo,     icd10_deasease.`d_Subblock` AS icd10_deasease_d_Subblock,     icd10_deasease.`d_NtfblDise` AS icd10_deasease_d_NtfblDise,     icd10_deasease.`d_Group` AS icd10_deasease_d_Group,     icd10_deasease.`d_disease` AS icd10_deasease_d_disease,     icd10_subblock.`d_SubTitle` AS icd10_subblock_d_SubTitle,     icd10_block.`d_Title` AS icd10_block_d_Title FROM     `icd10_deasease` icd10_deasease INNER JOIN `icd10_subblock` icd10_subblock ON icd10_deasease.`d_Subblock` = icd10_subblock.`d_Subblock`     INNER JOIN `icd10_block` icd10_block ON icd10_subblock.`d_block` = icd10_block.`d_block`
                sql = "DROP TABLE IF EXISTS `immr`.`immr_titles`";
                con.createStatement().execute(sql);
                // sql = "CREATE TABLE immr_titles SELECT     icd10_deasease.`d_immrNo` AS icd10_deasease_d_immrNo,     icd10_block.`d_Title` AS icd10_block_d_Title fROM     `icd10_deasease` icd10_deasease INNER JOIN `icd10_subblock` icd10_subblock ON icd10_deasease.`d_Subblock` = icd10_subblock.`d_Subblock`     INNER JOIN `icd10_block` icd10_block ON icd10_subblock.`d_block` = icd10_block.`d_block`GROUP BY     icd10_deasease_d_immrNo,     icd10_block_d_Title";
                sql = "CREATE TABLE immr_titles SELECT     icd10_immr.`d_immrNo` AS icd10_immr_d_immrNo,     icd10_immr.`d_disease` AS icd10_immr_d_disease,     icd10_block.`d_Title` AS icd10_block_d_Title FROM     `icd10_subblock` icd10_subblock RIGHT OUTER JOIN `icd10_deasease` icd10_deasease ON icd10_subblock.`d_Subblock` = icd10_deasease.`d_Subblock`    RIGHT OUTER JOIN `icd10_block` icd10_block ON icd10_subblock.`d_block` = icd10_block.`d_block`    RIGHT OUTER JOIN `icd10_immr` icd10_immr ON icd10_deasease.`d_immrNo` = icd10_immr.`d_immrNo` GROUP BY     icd10_immr_d_immrNo,     icd10_immr_d_disease,     icd10_block_d_Title ORDER BY     icd10_immr.`d_immrNo` ASC";

                con.createStatement().execute(sql);
                sql = "DROP TABLE IF EXISTS `immr`.`immr`";
                con.createStatement().execute(sql);
                //   sql = "CREATE TABLE immr SELECT     icd10_immr.`d_immrNo` AS icd10_immr_d_immrNo,     icd10_immr.`d_Group` AS icd10_immr_d_Group,     icd10_immr.`d_disease` AS icd10_immr_d_disease,     immr_titles.`icd10_deasease_d_immrNo` AS immr_titles_icd10_deasease_d_immrNo,     immr_titles.`icd10_block_d_Title` AS immr_titles_icd10_block_d_Title,     immr_final.`Disyear` AS immr_final_Disyear,     immr_final.`Disquarter` AS immr_final_Disquarter,     immr_final.`immr_code` AS immr_final_immr_code,     immr_final.`1_F_1` AS immr_final_1_F_1,     immr_final.`1_F_2` AS immr_final_1_F_2,     immr_final.`1_F_3` AS immr_final_1_F_3,     immr_final.`1_F_4` AS immr_final_1_F_4,     immr_final.`1_F_5` AS immr_final_1_F_5,     immr_final.`1_F_6` AS immr_final_1_F_6,     immr_final.`1_F_7` AS immr_final_1_F_7,     immr_final.`1_M_1` AS immr_final_1_M_1,     immr_final.`1_M_2` AS immr_final_1_M_2,     immr_final.`1_M_3` AS immr_final_1_M_3,     immr_final.`1_M_4` AS immr_final_1_M_4,     immr_final.`1_M_5` AS immr_final_1_M_5,     immr_final.`1_M_6` AS immr_final_1_M_6,     immr_final.`1_M_7` AS immr_final_1_M_7,     immr_final.`2_F_1` AS immr_final_2_F_1,     immr_final.`2_F_2` AS immr_final_2_F_2,     immr_final.`2_F_3` AS immr_final_2_F_3,     immr_final.`2_F_4` AS immr_final_2_F_4,     immr_final.`2_F_5` AS immr_final_2_F_5,     immr_final.`2_F_6` AS immr_final_2_F_6,     immr_final.`2_F_7` AS immr_final_2_F_7,     immr_final.`2_M_1` AS immr_final_2_M_1,     immr_final.`2_M_2` AS immr_final_2_M_2,     immr_final.`2_M_3` AS immr_final_2_M_3,     immr_final.`2_M_4` AS immr_final_2_M_4,     immr_final.`2_M_5` AS immr_final_2_M_5,     immr_final.`2_M_6` AS immr_final_2_M_6,     immr_final.`2_M_7` AS immr_final_2_M_7 FROM     `icd10_immr` icd10_immr LEFT OUTER JOIN `immr_titles` immr_titles ON icd10_immr.`d_immrNo` = immr_titles.`icd10_deasease_d_immrNo`     LEFT OUTER JOIN `immr_final` immr_final ON icd10_immr.`d_immrNo` = immr_final.`immr_code`ORDER BY     icd10_immr.`d_immrNo` ASC";

                //   sql = "CREATE TABLE immr SELECT     immr_final.`Disyear` AS immr_final_Disyear,     immr_final.`Disquarter` AS immr_final_Disquarter,     immr_final.`immr_code` AS immr_final_immr_code,     immr_final.`1_F_1` AS immr_final_1_F_1,     immr_final.`1_F_2` AS immr_final_1_F_2,     immr_final.`1_F_3` AS immr_final_1_F_3,     immr_final.`1_F_4` AS immr_final_1_F_4,     immr_final.`1_F_5` AS immr_final_1_F_5,     immr_final.`1_F_6` AS immr_final_1_F_6,     immr_final.`1_F_7` AS immr_final_1_F_7,     immr_final.`1_M_1` AS immr_final_1_M_1,     immr_final.`1_M_2` AS immr_final_1_M_2,     immr_final.`1_M_3` AS immr_final_1_M_3,     immr_final.`1_M_4` AS immr_final_1_M_4,     immr_final.`1_M_5` AS immr_final_1_M_5,     immr_final.`1_M_6` AS immr_final_1_M_6,     immr_final.`1_M_7` AS immr_final_1_M_7,     immr_final.`2_F_1` AS immr_final_2_F_1,     immr_final.`2_F_2` AS immr_final_2_F_2,     immr_final.`2_F_3` AS immr_final_2_F_3,     immr_final.`2_F_4` AS immr_final_2_F_4,     immr_final.`2_F_5` AS immr_final_2_F_5,     immr_final.`2_F_6` AS immr_final_2_F_6,     immr_final.`2_F_7` AS immr_final_2_F_7,     immr_final.`2_M_1` AS immr_final_2_M_1,     immr_final.`2_M_2` AS immr_final_2_M_2,     immr_final.`2_M_3` AS immr_final_2_M_3,     immr_final.`2_M_4` AS immr_final_2_M_4,     immr_final.`2_M_5` AS immr_final_2_M_5,     immr_final.`2_M_6` AS immr_final_2_M_6,     immr_final.`2_M_7` AS immr_final_2_M_7,     icd10_block.`d_Title` AS icd10_block_d_Title FROM     `icd10_deasease` icd10_deasease RIGHT OUTER JOIN `immr_final` immr_final ON icd10_deasease.`d_immrNo` = immr_final.`immr_code`     LEFT OUTER JOIN `icd10_subblock` icd10_subblock ON icd10_deasease.`d_Subblock` = icd10_subblock.`d_Subblock`     LEFT OUTER JOIN `icd10_block` icd10_block ON icd10_subblock.`d_block` = icd10_block.`d_block` ORDER BY     immr_final.`immr_code` ASC";


                //         sql = "CREATE TABLE immr SELECT     icd10_immr.`d_immrNo` AS icd10_immr_d_immrNo,     icd10_immr.`d_Group` AS icd10_immr_d_Group,     icd10_immr.`d_disease` AS icd10_immr_d_disease,     immr_titles.`icd10_deasease_d_immrNo` AS immr_titles_icd10_deasease_d_immrNo,     immr_titles.`icd10_block_d_Title` AS immr_titles_icd10_block_d_Title,     immr_final.`Disyear` AS immr_final_Disyear,     immr_final.`Disquarter` AS immr_final_Disquarter,     immr_final.`immr_code` AS immr_final_immr_code,     immr_final.`1_F_1` AS immr_final_1_F_1,     immr_final.`1_F_2` AS immr_final_1_F_2,     immr_final.`1_F_3` AS immr_final_1_F_3,     immr_final.`1_F_4` AS immr_final_1_F_4,     immr_final.`1_F_5` AS immr_final_1_F_5,     immr_final.`1_F_6` AS immr_final_1_F_6,     immr_final.`1_F_7` AS immr_final_1_F_7,     immr_final.`1_M_1` AS immr_final_1_M_1,     immr_final.`1_M_2` AS immr_final_1_M_2,     immr_final.`1_M_3` AS immr_final_1_M_3,     immr_final.`1_M_4` AS immr_final_1_M_4,     immr_final.`1_M_5` AS immr_final_1_M_5,     immr_final.`1_M_6` AS immr_final_1_M_6,     immr_final.`1_M_7` AS immr_final_1_M_7,     immr_final.`2_F_1` AS immr_final_2_F_1,     immr_final.`2_F_2` AS immr_final_2_F_2,     immr_final.`2_F_3` AS immr_final_2_F_3,     immr_final.`2_F_4` AS immr_final_2_F_4,     immr_final.`2_F_5` AS immr_final_2_F_5,     immr_final.`2_F_6` AS immr_final_2_F_6,     immr_final.`2_F_7` AS immr_final_2_F_7,     immr_final.`2_M_1` AS immr_final_2_M_1,     immr_final.`2_M_2` AS immr_final_2_M_2,     immr_final.`2_M_3` AS immr_final_2_M_3,     immr_final.`2_M_4` AS immr_final_2_M_4,     immr_final.`2_M_5` AS immr_final_2_M_5,     immr_final.`2_M_6` AS immr_final_2_M_6,     immr_final.`2_M_7` AS immr_final_2_M_7 FROM     `icd10_immr` icd10_immr LEFT OUTER JOIN `immr_titles` immr_titles ON icd10_immr.`d_immrNo` = immr_titles.`icd10_deasease_d_immrNo`     LEFT OUTER JOIN `immr_final` immr_final ON icd10_immr.`d_immrNo` = immr_final.`immr_code`ORDER BY     icd10_immr.`d_immrNo` ASC";
                sql = "CREATE TABLE immr  SELECT  immr_titles.`icd10_immr_d_immrNo` AS immr_titles_icd10_immr_d_immrNo, immr_titles.`icd10_immr_d_disease` AS immr_titles_icd10_immr_d_disease, immr_titles.`icd10_block_d_Title` AS immr_titles_icd10_block_d_Title,   immr_final.`Disyear` AS immr_final_Disyear,   immr_final.`Disquarter` AS immr_final_Disquarter,   immr_final.`immr_code` AS immr_final_immr_code,   immr_final.`1_F_1` AS immr_final_1_F_1,   immr_final.`1_F_2` AS immr_final_1_F_2,   immr_final.`1_F_3` AS immr_final_1_F_3,   immr_final.`1_F_4` AS immr_final_1_F_4,   immr_final.`1_F_5` AS immr_final_1_F_5,   immr_final.`1_F_6` AS immr_final_1_F_6,   immr_final.`1_F_7` AS immr_final_1_F_7,   immr_final.`1_M_1` AS immr_final_1_M_1,   immr_final.`1_M_2` AS immr_final_1_M_2,   immr_final.`1_M_3` AS immr_final_1_M_3,     immr_final.`1_M_4` AS immr_final_1_M_4,     immr_final.`1_M_5` AS immr_final_1_M_5,     immr_final.`1_M_6` AS immr_final_1_M_6,     immr_final.`1_M_7` AS immr_final_1_M_7,     immr_final.`2_F_1` AS immr_final_2_F_1,     immr_final.`2_F_2` AS immr_final_2_F_2,     immr_final.`2_F_3` AS immr_final_2_F_3,     immr_final.`2_F_4` AS immr_final_2_F_4,     immr_final.`2_F_5` AS immr_final_2_F_5,     immr_final.`2_F_6` AS immr_final_2_F_6,     immr_final.`2_F_7` AS immr_final_2_F_7,     immr_final.`2_M_1` AS immr_final_2_M_1,    immr_final.`2_M_2` AS immr_final_2_M_2,     immr_final.`2_M_3` AS immr_final_2_M_3,     immr_final.`2_M_4` AS immr_final_2_M_4,     immr_final.`2_M_5` AS immr_final_2_M_5,     immr_final.`2_M_6` AS immr_final_2_M_6,     immr_final.`2_M_7` AS immr_final_2_M_7 FROM     `immr_final` immr_final RIGHT OUTER JOIN `immr_titles` immr_titles ON immr_final.`immr_code` = immr_titles.`icd10_immr_d_immrNo`";
                con.createStatement().execute(sql);
                sql = "DROP TABLE IF EXISTS `immr`.`immr_subblock_group`";
                con.createStatement().execute(sql);

                sql = "CREATE TABLE immr_subblock_group SELECT     icd10_deasease.`d_immrNo` AS immrNo,     icd10_deasease.`d_Subblock` AS Subblock FROM     `icd10_deasease` icd10_deasease GROUP BY     immrNo,     Subblock ORDER BY     icd10_deasease.`d_immrNo` ASC,     icd10_deasease.`d_Subblock` ASC";
                con.createStatement().execute(sql);
                sql = "DROP TABLE IF EXISTS `immr`.`immr_subblocks`";
                con.createStatement().execute(sql);

                sql = "CREATE TABLE `immr`.`immr_subblocks` (  `immrno` VARCHAR(8) NOT NULL,  `subblocks` VARCHAR(1000) NOT NULL,  PRIMARY KEY (`immrno`)) ENGINE = MYISAM;";
                con.createStatement().execute(sql);
                //   createimmrsummary(immr_year, immr_quarter);
                createIMMRSummary(immr_year, immr_quarter);

                cr = new Cursor(Cursor.DEFAULT_CURSOR);
                setCursor(cr);
                JOptionPane.showMessageDialog(rootPane, "Completed !!!");
                progress.setVisible(false);

            } else {
                JOptionPane.showMessageDialog(null, "No IMMR data for the period");
                cr = new Cursor(Cursor.DEFAULT_CURSOR);
                setCursor(cr);
                dispose();
            }


            System.gc();
            progress.setValue(0);
           

//SELECT     icd10_immr.`d_immrNo` AS icd10_immr_d_immrNo,     icd10_immr.`d_Group` AS icd10_immr_d_Group,     icd10_immr.`d_disease` AS icd10_immr_d_disease,     immr_titles.`icd10_deasease_d_immrNo` AS immr_titles_icd10_deasease_d_immrNo,     immr_titles.`icd10_block_d_Title` AS immr_titles_icd10_block_d_Title,     immr_final.`Disyear` AS immr_final_Disyear,     immr_final.`Disquarter` AS immr_final_Disquarter,     immr_final.`immr_code` AS immr_final_immr_code,     immr_final.`1_F_1` AS immr_final_1_F_1,     immr_final.`1_F_2` AS immr_final_1_F_2,     immr_final.`1_F_3` AS immr_final_1_F_3,     immr_final.`1_F_4` AS immr_final_1_F_4,     immr_final.`1_F_5` AS immr_final_1_F_5,     immr_final.`1_F_6` AS immr_final_1_F_6,     immr_final.`1_F_7` AS immr_final_1_F_7,     immr_final.`1_M_1` AS immr_final_1_M_1,     immr_final.`1_M_2` AS immr_final_1_M_2,     immr_final.`1_M_3` AS immr_final_1_M_3,     immr_final.`1_M_4` AS immr_final_1_M_4,     immr_final.`1_M_5` AS immr_final_1_M_5,     immr_final.`1_M_6` AS immr_final_1_M_6,     immr_final.`1_M_7` AS immr_final_1_M_7,     immr_final.`2_F_1` AS immr_final_2_F_1,     immr_final.`2_F_2` AS immr_final_2_F_2,     immr_final.`2_F_3` AS immr_final_2_F_3,     immr_final.`2_F_4` AS immr_final_2_F_4,     immr_final.`2_F_5` AS immr_final_2_F_5,     immr_final.`2_F_6` AS immr_final_2_F_6,     immr_final.`2_F_7` AS immr_final_2_F_7,     immr_final.`2_M_1` AS immr_final_2_M_1,     immr_final.`2_M_2` AS immr_final_2_M_2,     immr_final.`2_M_3` AS immr_final_2_M_3,     immr_final.`2_M_4` AS immr_final_2_M_4,     immr_final.`2_M_5` AS immr_final_2_M_5,     immr_final.`2_M_6` AS immr_final_2_M_6,     immr_final.`2_M_7` AS immr_final_2_M_7 FROM     `icd10_immr` icd10_immr LEFT OUTER JOIN `immr_titles` immr_titles ON icd10_immr.`d_immrNo` = immr_titles.`icd10_deasease_d_immrNo`     LEFT OUTER JOIN `immr_final` immr_final ON icd10_immr.`d_immrNo` = immr_final.`immr_code`ORDER BY     icd10_immr.`d_immrNo` ASC";
            //SELECT     year(diagnose.`dis_date`) AS disyear,     quarter(diagnose.`dis_date`) AS disquarter,     count(diagnose.`bhtno`) AS countPatients,     register.`sex` AS sex,     admissions.`grp_code` AS age_group,     diagnose.`d_group` AS deasease_code,     diagnose.`dis_code` AS discharge_code FROM     `admissions` admissions INNER JOIN `register` register ON admissions.`pidno` = register.`pid`     INNER JOIN `diagnose` diagnose ON admissions.`bhtno` = diagnose.`bhtno`GROUP BY     year(diagnose.`dis_date`),     diagnose.`dis_date`,     quarter(diagnose.`dis_date`),     diagnose.`dis_date`,     age_group,     discharge_code,     deasease_code,     sex
//SELECT      sum(immr_data.`countPatients`) AS immr_count,     immr_groups.`combination` AS category,     immr_data.`disyear` AS disyear,     immr_data.`disquarter` AS disquarter,     icd10_deasease.`d_immrNo` AS immr_code FROM     `immr_data` immr_data RIGHT OUTER JOIN `immr_groups` immr_groups ON immr_data.`combination` = immr_groups.`combination`     LEFT OUTER JOIN `icd10_deasease` icd10_deasease ON immr_data.`deasease_code` = icd10_deasease.`d_Group`GROUP BY     category,   disyear,     disquarter,    immr_code;

        } catch (SQLException ex) {
            Logger.getLogger(Frm_IMMR.class.getName()).log(Level.SEVERE, null, ex);
        }


    }

    void appendSubblocks() {

        try {

            String sqlappend = "";
            String v1 = "";
            String v2 = "";

            sqlappend = "DELETE  from immr_subblocks";
            con.createStatement().execute(sqlappend);

            try {
                String sql = "SELECT     icd10_deasease.`d_immrNo` AS immrNo FROM     `icd10_deasease` icd10_deasease where length( icd10_deasease.`d_immrNo`) >0 GROUP BY     immrNo ORDER BY     icd10_deasease.`d_immrNo` ASC;";
                ResultSet resultSet = wans_javalib.RecordManipulator.getResultSet(con, sql);
                while (resultSet.next()) {
                    v1 = resultSet.getString(1);
                    v2 = subblocks(resultSet.getString(1));

                    sqlappend = "INSERT INTO immr_subblocks (`immrno`,`subblocks`) VALUES ('" + v1 + "','" + v2 + "')";
                    con.createStatement().execute(sqlappend);
                }
            } catch (SQLException ex) {
                Logger.getLogger(Frm_IMMR.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (SQLException ex) {
            Logger.getLogger(Frm_IMMR.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    String subblocks(String immrno) {
        String s = "";
        String sql = "SELECT Subblock FROM immr_subblock_group where immrno = '" + immrno + "'";
        ResultSet resultSet = wans_javalib.RecordManipulator.getResultSet(con, sql);
        try {
            while (resultSet.next()) {
                s = s + resultSet.getString(1) + ",";
            }
            s = s.trim();
        } catch (SQLException ex) {
            Logger.getLogger(Frm_IMMR.class.getName()).log(Level.SEVERE, null, ex);
        }
        return s;
    }

    void clearTempTables() {
        try {
            String sql = "";
            sql = "DROP TABLE IF EXISTS `immr`.`diagnose1`";
            con.createStatement().execute(sql);
            sql = "DROP TABLE IF EXISTS `immr`.`immr_groups`";
            con.createStatement().execute(sql);

            sql = "DROP TABLE IF EXISTS `immr`.`immr_data`";
            con.createStatement().execute(sql);


            sql = "DROP TABLE IF EXISTS `immr`.`immr_cross_data`";
            con.createStatement().execute(sql);

            sql = "DROP TABLE IF EXISTS `immr`.`immr_final`";
            con.createStatement().execute(sql);
            sql = "DROP TABLE IF EXISTS `immr`.`immr_titles`";
            con.createStatement().execute(sql);
            sql = "DROP TABLE IF EXISTS `immr`.`immr`";
            con.createStatement().execute(sql);
            sql = "DROP TABLE IF EXISTS `immr`.`immr_admission`";
            con.createStatement().execute(sql);
            sql = "DROP TABLE IF EXISTS `immr`.`immr_non_discharged`";
            con.createStatement().execute(sql);
            sql = "DROP TABLE IF EXISTS `immr`.`immr_discharged`";
            con.createStatement().execute(sql);
            sql = "DROP TABLE IF EXISTS `immr`.`immr_subblock_group`";
            con.createStatement().execute(sql);
            sql = "DROP TABLE IF EXISTS `immr`.`immr_subblocks`";
            con.createStatement().execute(sql);


        } catch (SQLException ex) {
            Logger.getLogger(Frm_IMMR.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    private void btn_makeIMMRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_makeIMMRActionPerformed
        progress.setVisible(true);

        Runnable rn = new Runnable() {
            @Override
            public void run() {
                int y = Integer.parseInt(combo_year.getSelectedItem().toString());
                int q = Integer.parseInt(combo_qtr.getSelectedItem().toString());
                createimmrdata(y, q);

            }
        };

        Thread tr = new Thread(rn);
        tr.start();
        btn_makeIMMR.setEnabled(false);
    }//GEN-LAST:event_btn_makeIMMRActionPerformed
    void viewReport() {
        try {
            int y = Integer.parseInt(combo_year.getSelectedItem().toString());
            int q = Integer.parseInt(combo_qtr.getSelectedItem().toString());


            createIMMRSummary(y, q);
            Date startDateofQuarter = wans_javalib.wans_Formats.getEndDateofQuarter(2012, 1);
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            String format = df.format(startDateofQuarter);
            //  System.out.println("date : " + format);
            Map m1 = new HashMap();
//immr_year  immr_quarter
            m1.put("immr_year", y);
            m1.put("immr_quarter", q);
            Report rpt1 = new Report();
            rpt1.generateReport("IMMR_100_R09_Part1.jrxml", m1, con, "IMMR_Part1");

            Map m2 = new HashMap();

            FinalSummary fs = new FinalSummary(con, y, q);
            int fs_item_A = fs.getFs_item_A();
            int fs_item_b = fs.getFs_item_B(y, q);
            int fs_item_C = fs.getFs_item_C();
            int fs_item_d = fs.getFs_item_D();
            int fs_item_e = fs.getFs_item_E();
            int fs_item_f = fs.getFs_item_F();
            int fs_item_g = fs.getFs_item_G(y, q);
            int fs_item_h = fs.getFs_item_H();
            int fs_item_i = fs.getFs_item_I(y, q);
            int fs_item_J = fs.getFs_item_J(y, q);
            m2.put("fs_item_A", fs_item_A);
            m2.put("fs_item_B", fs_item_b);
            m2.put("fs_item_C", fs_item_C);
            m2.put("fs_item_D", fs_item_d);
            m2.put("fs_item_E", fs_item_e);
            m2.put("fs_item_F", fs_item_f);
            m2.put("fs_item_G", fs_item_g);
            m2.put("fs_item_H", fs_item_h);
            m2.put("fs_item_I", fs_item_i);
            m2.put("fs_item_J", fs_item_J);
            Report rpt = new Report();
            rpt.generateReport("IMMR_100_R09_Part2.jrxml", m2, con, "IMMR_Part2");


        } catch (JRException ex) {
            Logger.getLogger(Frm_IMMR.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        progress.setVisible(false);
        btn_makeIMMR.setEnabled(true);

    }//GEN-LAST:event_formInternalFrameOpened

    private void combo_qtrItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_qtrItemStateChanged
        int y = Integer.parseInt(combo_year.getSelectedItem().toString());
        int q = Integer.parseInt(combo_qtr.getSelectedItem().toString());


        FinalSummary fs = new FinalSummary(con);
        int bedsForQuarter = fs.getBedsForQuarter(y, q);
        boolean foundBedsForQuarter = fs.isFoundBedsForQuarter(y, q);
        if (foundBedsForQuarter) {
            btn_add.setText("Edit");

        } else {
            btn_add.setText("Add");
        }
        txt_beds.setText("" + bedsForQuarter);
    }//GEN-LAST:event_combo_qtrItemStateChanged

    private void cmd_immrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_immrActionPerformed
        int y = Integer.parseInt(combo_year.getSelectedItem().toString());
        int q = Integer.parseInt(combo_qtr.getSelectedItem().toString());


        FinalSummary fs = new FinalSummary(con);
        int bedsForQuarter = fs.getBedsForQuarter(y, q);
        boolean foundBedsForQuarter = fs.isFoundBedsForQuarter(y, q);
        if (foundBedsForQuarter) {
            JOptionPane.showMessageDialog(rootPane, "Number of Patient Beds for this quarter is " + bedsForQuarter, "IMMR for " + y + " - " + q, JOptionPane.INFORMATION_MESSAGE);
            viewReport();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Number of Patient Beds for this quarter  is " + bedsForQuarter, "IMMR for " + y + " - " + q + "\nPlease add the number of beds", JOptionPane.INFORMATION_MESSAGE);

        }


    }//GEN-LAST:event_cmd_immrActionPerformed

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        String sql = "";
        try {
            int y = Integer.parseInt(combo_year.getSelectedItem().toString());
            int q = Integer.parseInt(combo_qtr.getSelectedItem().toString());
            String text = txt_beds.getText();
            String t = "";
            if (btn_add.getText() == "Add") {
                sql = "INSERT INTO beds (`immr_year`,`immr_qtr`,`beds`) VALUES ('" + y + "','" + q + "','" + text + "')";
                t = "Add";
            } else {
                sql = "UPDATE beds SET beds = '" + text + "' where `immr_year` = '" + y + "' and immr_qtr='" + q + "'";
                t = "Edit";
            }
            con.createStatement().execute(sql);
            JOptionPane.showMessageDialog(null, "Record " + t + "ed");
        } catch (SQLException ex) {
            Logger.getLogger(Frm_IMMR.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btn_addActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        clearTempTables();
    }//GEN-LAST:event_formInternalFrameClosed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_makeIMMR;
    private javax.swing.JButton cmd_immr;
    private javax.swing.JComboBox combo_qtr;
    private javax.swing.JComboBox combo_year;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JProgressBar progress;
    private javax.swing.JTextField txt_beds;
    // End of variables declaration//GEN-END:variables
}
